basePath: /api/v1
definitions:
  dto.CreateBrandInput:
    properties:
      description:
        type: string
      name:
        type: string
    type: object
  dto.UpdateBrandInput:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  entity.Brand:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  entity.Category:
    properties:
      description:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  entity.Product:
    properties:
      brand_id:
        type: string
      category_id:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      quantity_in_stock:
        type: integer
    type: object
  errors.HTTPError:
    properties:
      error: {}
      message:
        type: string
      status_code:
        type: integer
    type: object
  service.CreateProductInput:
    properties:
      brand_id:
        type: string
      category_id:
        type: string
      description:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      quantity_in_stock:
        type: integer
    type: object
  service.UpdateProductInput:
    properties:
      brand_id:
        type: string
      category_id:
        type: string
      description:
        type: string
      id:
        type: string
      image_url:
        type: string
      name:
        type: string
      price:
        type: number
      quantity_in_stock:
        type: integer
    type: object
host: localhost:8080
info:
  contact:
    email: becardiine@gmail.com
  description: This is a simple API for managing stock
  termsOfService: http://swagger.io/terms/
  title: Gestok API
  version: "1.0"
paths:
  /brands:
    get:
      description: List brands
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Items per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Brand'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: List brands
      tags:
      - brands
    post:
      consumes:
      - application/json
      description: Create a new brand
      parameters:
      - description: Brand data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.CreateBrandInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new brand
      tags:
      - brands
  /brands/{id}:
    delete:
      description: Delete a brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a brand
      tags:
      - brands
    get:
      description: Get a brand
      parameters:
      - description: Brand ID
        format: uuid
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Brand'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get a brand
      tags:
      - brands
    put:
      consumes:
      - application/json
      description: Update a brand
      parameters:
      - description: Brand ID
        in: path
        name: id
        required: true
        type: string
      - description: Brand data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/dto.UpdateBrandInput'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a brand
      tags:
      - brands
  /categories:
    get:
      consumes:
      - application/json
      description: List all categories
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Limit per page
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Category'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: List categories
      tags:
      - categories
    post:
      consumes:
      - application/json
      description: Create a new category
      parameters:
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Create category
      tags:
      - categories
  /categories/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Delete category
      tags:
      - categories
    get:
      consumes:
      - application/json
      description: Get a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Category'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get category
      tags:
      - categories
    put:
      consumes:
      - application/json
      description: Update a category by ID
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      - description: Category object
        in: body
        name: category
        required: true
        schema:
          $ref: '#/definitions/entity.Category'
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: "No"
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Update category
      tags:
      - categories
  /categories/{id}/products:
    get:
      consumes:
      - application/json
      description: Get all products for a category
      parameters:
      - description: Category ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      summary: Get category products
      tags:
      - categories
  /products:
    get:
      consumes:
      - application/json
      description: List all products
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Product'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: List all products
      tags:
      - products
    post:
      consumes:
      - application/json
      description: Create a new product
      parameters:
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.CreateProductInput'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Create a new product
      tags:
      - products
  /products/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Delete a product
      tags:
      - products
    get:
      consumes:
      - application/json
      description: Get a product by ID
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Get a product by ID
      tags:
      - products
    put:
      consumes:
      - application/json
      description: Update a product
      parameters:
      - description: Product ID
        in: path
        name: id
        required: true
        type: string
      - description: Product data
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/service.UpdateProductInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Product'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/errors.HTTPError'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/errors.HTTPError'
      security:
      - ApiKeyAuth: []
      summary: Update a product
      tags:
      - products
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
