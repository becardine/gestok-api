// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_queries.sql

package db

import (
	"context"
	"database/sql"
)

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (name, description, price, quantity_in_stock, image_url, category_id, brand_id, created_date, updated_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9)
`

type CreateProductParams struct {
	Name            string
	Description     sql.NullString
	Price           string
	QuantityInStock int32
	ImageUrl        sql.NullString
	CategoryID      sql.NullInt32
	BrandID         sql.NullInt32
	CreatedDate     sql.NullTime
	UpdatedDate     sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.QuantityInStock,
		arg.ImageUrl,
		arg.CategoryID,
		arg.BrandID,
		arg.CreatedDate,
		arg.UpdatedDate,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, quantity_in_stock, image_url, category_id, brand_id, created_date, updated_date FROM products WHERE id = $1
`

func (q *Queries) GetProduct(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.QuantityInStock,
		&i.ImageUrl,
		&i.CategoryID,
		&i.BrandID,
		&i.CreatedDate,
		&i.UpdatedDate,
	)
	return i, err
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, quantity_in_stock, image_url, category_id, brand_id, created_date, updated_date FROM products ORDER BY name
`

func (q *Queries) ListProducts(ctx context.Context) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.QuantityInStock,
			&i.ImageUrl,
			&i.CategoryID,
			&i.BrandID,
			&i.CreatedDate,
			&i.UpdatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $2, description = $3, price = $4, quantity_in_stock = $5, image_url = $6, category_id = $7, brand_id = $8, updated_date = $9
WHERE id = $1
`

type UpdateProductParams struct {
	ID              int32
	Name            string
	Description     sql.NullString
	Price           string
	QuantityInStock int32
	ImageUrl        sql.NullString
	CategoryID      sql.NullInt32
	BrandID         sql.NullInt32
	UpdatedDate     sql.NullTime
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.QuantityInStock,
		arg.ImageUrl,
		arg.CategoryID,
		arg.BrandID,
		arg.UpdatedDate,
	)
	return err
}
