// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: coupon_queries.sql

package sqlc

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createCoupon = `-- name: CreateCoupon :exec
INSERT INTO coupons (id, code, discount, expiration_at, status, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateCouponParams struct {
	ID           uuid.UUID
	Code         string
	Discount     float64
	ExpirationAt time.Time
	Status       string
	CreatedAt    sql.NullTime
	UpdatedAt    sql.NullTime
}

func (q *Queries) CreateCoupon(ctx context.Context, arg CreateCouponParams) error {
	_, err := q.db.ExecContext(ctx, createCoupon,
		arg.ID,
		arg.Code,
		arg.Discount,
		arg.ExpirationAt,
		arg.Status,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteCoupon = `-- name: DeleteCoupon :exec
UPDATE coupons
SET deleted_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteCoupon(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteCoupon, id)
	return err
}

const getCoupon = `-- name: GetCoupon :one
SELECT id, code, discount, expiration_at, status, deleted_at, created_at, updated_at FROM coupons WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetCoupon(ctx context.Context, id uuid.UUID) (Coupon, error) {
	row := q.db.QueryRowContext(ctx, getCoupon, id)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Discount,
		&i.ExpirationAt,
		&i.Status,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCouponByCode = `-- name: GetCouponByCode :one
SELECT id, code, discount, expiration_at, status, deleted_at, created_at, updated_at
FROM coupons
WHERE LOWER(code) = LOWER(?) AND deleted_at IS NULL
`

func (q *Queries) GetCouponByCode(ctx context.Context, lower string) (Coupon, error) {
	row := q.db.QueryRowContext(ctx, getCouponByCode, lower)
	var i Coupon
	err := row.Scan(
		&i.ID,
		&i.Code,
		&i.Discount,
		&i.ExpirationAt,
		&i.Status,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listCoupons = `-- name: ListCoupons :many
SELECT id, code, discount, expiration_at, status, deleted_at, created_at, updated_at
FROM coupons
WHERE deleted_at IS NULL
ORDER BY created_at DESC
LIMIT 1 OFFSET 2
`

func (q *Queries) ListCoupons(ctx context.Context) ([]Coupon, error) {
	rows, err := q.db.QueryContext(ctx, listCoupons)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Coupon
	for rows.Next() {
		var i Coupon
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.Discount,
			&i.ExpirationAt,
			&i.Status,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCoupon = `-- name: UpdateCoupon :exec
UPDATE coupons
SET code = ?, discount = ?, expiration_at = ?, status = ?, updated_at = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdateCouponParams struct {
	Code         string
	Discount     float64
	ExpirationAt time.Time
	Status       string
	UpdatedAt    sql.NullTime
	ID           uuid.UUID
}

func (q *Queries) UpdateCoupon(ctx context.Context, arg UpdateCouponParams) error {
	_, err := q.db.ExecContext(ctx, updateCoupon,
		arg.Code,
		arg.Discount,
		arg.ExpirationAt,
		arg.Status,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}
