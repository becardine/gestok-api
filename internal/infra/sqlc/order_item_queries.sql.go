// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_item_queries.sql

package db

import (
	"context"
	"time"

	"github.com/becardine/gestock-api/internal/domain/entity/common"
	"github.com/google/uuid"
)

const createOrderItem = `-- name: CreateOrderItem :one
INSERT INTO order_items (
    id, order_id, product_id, quantity, unit_price, created_at, updated_at
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, order_id, product_id, quantity, unit_price, created_at, updated_at, deleted_at
`

type CreateOrderItemParams struct {
	ID        common.ID
	OrderID   uuid.NullUUID
	ProductID uuid.NullUUID
	Quantity  int32
	UnitPrice string
	CreatedAt time.Time
	UpdatedAt time.Time
}

func (q *Queries) CreateOrderItem(ctx context.Context, arg CreateOrderItemParams) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, createOrderItem,
		arg.ID,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.UnitPrice,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteOrderItem = `-- name: DeleteOrderItem :exec
UPDATE order_items
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteOrderItem(ctx context.Context, id common.ID) error {
	_, err := q.db.ExecContext(ctx, deleteOrderItem, id)
	return err
}

const getOrderItem = `-- name: GetOrderItem :one
SELECT id, order_id, product_id, quantity, unit_price, created_at, updated_at, deleted_at FROM order_items WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetOrderItem(ctx context.Context, id common.ID) (OrderItem, error) {
	row := q.db.QueryRowContext(ctx, getOrderItem, id)
	var i OrderItem
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.ProductID,
		&i.Quantity,
		&i.UnitPrice,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const listOrderItems = `-- name: ListOrderItems :many
SELECT id, order_id, product_id, quantity, unit_price, created_at, updated_at, deleted_at 
FROM order_items 
WHERE order_id = $1 AND deleted_at IS NULL 
ORDER BY created_at
LIMIT $2 OFFSET $3
`

type ListOrderItemsParams struct {
	OrderID uuid.NullUUID
	Limit   int32
	Offset  int32
}

func (q *Queries) ListOrderItems(ctx context.Context, arg ListOrderItemsParams) ([]OrderItem, error) {
	rows, err := q.db.QueryContext(ctx, listOrderItems, arg.OrderID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []OrderItem
	for rows.Next() {
		var i OrderItem
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.ProductID,
			&i.Quantity,
			&i.UnitPrice,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderItem = `-- name: UpdateOrderItem :exec
UPDATE order_items
SET quantity = $2, unit_price = $3, updated_at = $4
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateOrderItemParams struct {
	ID        common.ID
	Quantity  int32
	UnitPrice string
	UpdatedAt time.Time
}

func (q *Queries) UpdateOrderItem(ctx context.Context, arg UpdateOrderItemParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderItem,
		arg.ID,
		arg.Quantity,
		arg.UnitPrice,
		arg.UpdatedAt,
	)
	return err
}
