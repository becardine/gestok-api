// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: order_queries.sql

package db

import (
	"context"
	"database/sql"
)

const addOrderProduct = `-- name: AddOrderProduct :exec
INSERT INTO order_products (order_id, product_id, quantity, unit_price)
VALUES (?, ?, ?, ?)
ON DUPLICATE KEY UPDATE order_id = order_id
`

type AddOrderProductParams struct {
	OrderID   sql.NullString
	ProductID sql.NullString
	Quantity  int32
	UnitPrice float64
}

func (q *Queries) AddOrderProduct(ctx context.Context, arg AddOrderProductParams) error {
	_, err := q.db.ExecContext(ctx, addOrderProduct,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.UnitPrice,
	)
	return err
}

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (id, customer_id, order_at, order_status, total_value, created_at, updated_at)
VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderParams struct {
	ID          string
	CustomerID  sql.NullString
	OrderAt     sql.NullTime
	OrderStatus string
	TotalValue  float64
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.ExecContext(ctx, createOrder,
		arg.ID,
		arg.CustomerID,
		arg.OrderAt,
		arg.OrderStatus,
		arg.TotalValue,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteOrder = `-- name: DeleteOrder :exec
UPDATE orders
SET deleted_at = NOW()
WHERE id = ?
`

func (q *Queries) DeleteOrder(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const getOrder = `-- name: GetOrder :one
SELECT id, customer_id, order_at, order_status, total_value, deleted_at, created_at, updated_at FROM orders WHERE id = ? AND deleted_at IS NULL
`

func (q *Queries) GetOrder(ctx context.Context, id string) (Order, error) {
	row := q.db.QueryRowContext(ctx, getOrder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.CustomerID,
		&i.OrderAt,
		&i.OrderStatus,
		&i.TotalValue,
		&i.DeletedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getOrderByCustomerId = `-- name: GetOrderByCustomerId :many
SELECT id, customer_id, order_at, order_status, total_value, deleted_at, created_at, updated_at
FROM orders
WHERE customer_id = ? AND deleted_at IS NULL
ORDER BY order_at DESC
LIMIT 2 OFFSET 3
`

func (q *Queries) GetOrderByCustomerId(ctx context.Context, customerID sql.NullString) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByCustomerId, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.OrderAt,
			&i.OrderStatus,
			&i.TotalValue,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderByProductId = `-- name: GetOrderByProductId :many
SELECT o.id, o.customer_id, o.order_at, o.order_status, o.total_value, o.deleted_at, o.created_at, o.updated_at
FROM orders o
JOIN order_products op ON o.id = op.order_id
WHERE op.product_id = ? AND o.deleted_at IS NULL
ORDER BY o.order_at DESC
LIMIT 2 OFFSET 3
`

func (q *Queries) GetOrderByProductId(ctx context.Context, productID sql.NullString) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, getOrderByProductId, productID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.OrderAt,
			&i.OrderStatus,
			&i.TotalValue,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderProducts = `-- name: GetOrderProducts :many
SELECT p.id, p.name, p.description, p.price, p.quantity_in_stock, p.image_url, p.category_id, p.brand_id, p.deleted_at, p.created_at, p.updated_at
FROM orders o
JOIN order_products op ON o.id = op.order_id
JOIN products p ON op.product_id = p.id
WHERE o.id = ? AND o.deleted_at IS NULL AND p.deleted_at IS NULL
ORDER BY p.name
`

func (q *Queries) GetOrderProducts(ctx context.Context, id string) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, getOrderProducts, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.QuantityInStock,
			&i.ImageUrl,
			&i.CategoryID,
			&i.BrandID,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listOrders = `-- name: ListOrders :many
SELECT id, customer_id, order_at, order_status, total_value, deleted_at, created_at, updated_at
FROM orders
WHERE deleted_at IS NULL
ORDER BY order_at DESC
LIMIT 1 OFFSET 2
`

func (q *Queries) ListOrders(ctx context.Context) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.CustomerID,
			&i.OrderAt,
			&i.OrderStatus,
			&i.TotalValue,
			&i.DeletedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeOrderProduct = `-- name: RemoveOrderProduct :execresult
DELETE FROM order_products
WHERE order_id = ? AND product_id = ?
`

type RemoveOrderProductParams struct {
	OrderID   sql.NullString
	ProductID sql.NullString
}

func (q *Queries) RemoveOrderProduct(ctx context.Context, arg RemoveOrderProductParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeOrderProduct, arg.OrderID, arg.ProductID)
}

const updateOrder = `-- name: UpdateOrder :exec
UPDATE orders
SET order_at = ?, order_status = ?, total_value = ?, updated_at = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdateOrderParams struct {
	OrderAt     sql.NullTime
	OrderStatus string
	TotalValue  float64
	UpdatedAt   sql.NullTime
	ID          string
}

func (q *Queries) UpdateOrder(ctx context.Context, arg UpdateOrderParams) error {
	_, err := q.db.ExecContext(ctx, updateOrder,
		arg.OrderAt,
		arg.OrderStatus,
		arg.TotalValue,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET order_status = ?
WHERE id = ? AND deleted_at IS NULL
`

type UpdateOrderStatusParams struct {
	OrderStatus string
	ID          string
}

func (q *Queries) UpdateOrderStatus(ctx context.Context, arg UpdateOrderStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderStatus, arg.OrderStatus, arg.ID)
	return err
}
