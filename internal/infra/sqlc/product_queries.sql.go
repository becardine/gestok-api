// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product_queries.sql

package db

import (
	"context"
	"database/sql"

	"github.com/becardine/gestock-api/internal/domain/entity/common"
	"github.com/google/uuid"
)

const addProductStock = `-- name: AddProductStock :exec
INSERT INTO product_stocks (stock_id, product_id)
VALUES ($1, $2)
ON CONFLICT (stock_id, product_id) DO NOTHING
`

type AddProductStockParams struct {
	StockID   uuid.NullUUID
	ProductID uuid.NullUUID
}

func (q *Queries) AddProductStock(ctx context.Context, arg AddProductStockParams) error {
	_, err := q.db.ExecContext(ctx, addProductStock, arg.StockID, arg.ProductID)
	return err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (id, name, description, price, quantity_in_stock, image_url, category_id, brand_id, created_date, updated_date)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10)
`

type CreateProductParams struct {
	ID              common.ID
	Name            string
	Description     sql.NullString
	Price           string
	QuantityInStock int32
	ImageUrl        sql.NullString
	CategoryID      uuid.NullUUID
	BrandID         uuid.NullUUID
	CreatedDate     sql.NullTime
	UpdatedDate     sql.NullTime
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.ExecContext(ctx, createProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.QuantityInStock,
		arg.ImageUrl,
		arg.CategoryID,
		arg.BrandID,
		arg.CreatedDate,
		arg.UpdatedDate,
	)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
UPDATE products
SET deleted_at = NOW()
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id common.ID) error {
	_, err := q.db.ExecContext(ctx, deleteProduct, id)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT id, name, description, price, quantity_in_stock, image_url, category_id, brand_id, deleted_at, created_date, updated_date FROM products WHERE id = $1 AND deleted_at IS NULL
`

func (q *Queries) GetProduct(ctx context.Context, id common.ID) (Product, error) {
	row := q.db.QueryRowContext(ctx, getProduct, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.QuantityInStock,
		&i.ImageUrl,
		&i.CategoryID,
		&i.BrandID,
		&i.DeletedAt,
		&i.CreatedDate,
		&i.UpdatedDate,
	)
	return i, err
}

const getProductStocks = `-- name: GetProductStocks :many
SELECT s.id, s.name, s.location, s.capacity, s.deleted_at, s.created_date, s.updated_date
FROM products p
         JOIN product_stocks ps ON p.id = ps.product_id
         JOIN stocks s ON ps.stock_id = s.id
WHERE p.id = $1 AND p.deleted_at IS NULL AND s.deleted_at IS NULL
ORDER BY s.name
`

func (q *Queries) GetProductStocks(ctx context.Context, id common.ID) ([]Stock, error) {
	rows, err := q.db.QueryContext(ctx, getProductStocks, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Stock
	for rows.Next() {
		var i Stock
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Location,
			&i.Capacity,
			&i.DeletedAt,
			&i.CreatedDate,
			&i.UpdatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProducts = `-- name: ListProducts :many
SELECT id, name, description, price, quantity_in_stock, image_url, category_id, brand_id, deleted_at, created_date, updated_date
FROM products
WHERE deleted_at IS NULL
ORDER BY name
LIMIT $1 OFFSET $2
`

type ListProductsParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]Product, error) {
	rows, err := q.db.QueryContext(ctx, listProducts, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.QuantityInStock,
			&i.ImageUrl,
			&i.CategoryID,
			&i.BrandID,
			&i.DeletedAt,
			&i.CreatedDate,
			&i.UpdatedDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeProductStock = `-- name: RemoveProductStock :execresult
DELETE FROM product_stocks ps
WHERE ps.stock_id = $1 AND ps.product_id = $2
RETURNING CASE WHEN EXISTS(SELECT 1 FROM product_stocks WHERE stock_id = $1 AND product_id = $2) THEN 0 ELSE 1 END
`

type RemoveProductStockParams struct {
	StockID   uuid.NullUUID
	ProductID uuid.NullUUID
}

func (q *Queries) RemoveProductStock(ctx context.Context, arg RemoveProductStockParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, removeProductStock, arg.StockID, arg.ProductID)
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET name = $2, description = $3, price = $4, quantity_in_stock = $5, image_url = $6, category_id = $7, brand_id = $8, updated_date = $9
WHERE id = $1 AND deleted_at IS NULL
`

type UpdateProductParams struct {
	ID              common.ID
	Name            string
	Description     sql.NullString
	Price           string
	QuantityInStock int32
	ImageUrl        sql.NullString
	CategoryID      uuid.NullUUID
	BrandID         uuid.NullUUID
	UpdatedDate     sql.NullTime
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.ExecContext(ctx, updateProduct,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.Price,
		arg.QuantityInStock,
		arg.ImageUrl,
		arg.CategoryID,
		arg.BrandID,
		arg.UpdatedDate,
	)
	return err
}
